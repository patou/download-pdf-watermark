name: CI - Test and Build

on:
  push:
    branches: [ main, develop, settings ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, intl, zip
        tools: composer:v2
        
    - name: Validate composer.json
      run: composer validate --strict
      
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-
          
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
      
    - name: Check PHP syntax
      run: find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;
      
    - name: Verify plugin file structure
      run: |
        echo "Checking plugin structure..."
        test -f download-pdf-watermark.php || (echo "Main plugin file missing" && exit 1)
        test -d admin || (echo "Admin directory missing" && exit 1)
        test -f admin/class-dpw-settings.php || (echo "Settings class file missing" && exit 1)
        echo "Plugin structure is valid âœ“"

  build-dev:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, intl, zip
        tools: composer:v2
        
    - name: Install Composer dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction
      
    - name: Create development build
      run: |
        mkdir -p build/download-pdf-watermark
        
        # Copier les fichiers
        cp download-pdf-watermark.php build/download-pdf-watermark/
        cp README.md build/download-pdf-watermark/
        cp composer.json build/download-pdf-watermark/
        cp -r admin build/download-pdf-watermark/
        cp -r assets build/download-pdf-watermark/
        cp -r includes build/download-pdf-watermark/
        cp -r public build/download-pdf-watermark/
        cp -r vendor build/download-pdf-watermark/
        
        # Nettoyer
        find build/download-pdf-watermark -name ".DS_Store" -delete
        
    - name: Get commit info
      id: commit_info
      run: |
        COMMIT_SHORT=$(git rev-parse --short HEAD)
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
        echo "commit_short=$COMMIT_SHORT" >> $GITHUB_OUTPUT
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        
    - name: Create development ZIP
      run: |
        cd build
        zip -r download-pdf-watermark-dev-${{ steps.commit_info.outputs.branch_name }}-${{ steps.commit_info.outputs.commit_short }}.zip download-pdf-watermark/
        
    - name: Upload development build
      uses: actions/upload-artifact@v3
      with:
        name: download-pdf-watermark-dev-${{ steps.commit_info.outputs.branch_name }}-${{ steps.commit_info.outputs.commit_short }}
        path: build/download-pdf-watermark-dev-${{ steps.commit_info.outputs.branch_name }}-${{ steps.commit_info.outputs.commit_short }}.zip
        retention-days: 7