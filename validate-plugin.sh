#!/bin/bash

# Script de validation pour le plugin WordPress Download PDF Watermark
# Usage: ./validate-plugin.sh [chemin_vers_plugin]

PLUGIN_PATH="${1:-.}"
PLUGIN_NAME="download-pdf-watermark"
MAIN_FILE="download-pdf-watermark.php"

echo "üîç Validation du plugin WordPress: $PLUGIN_NAME"
echo "üìÇ R√©pertoire analys√©: $PLUGIN_PATH"
echo "=================================================="

# Compteur d'erreurs
ERRORS=0
WARNINGS=0

# Fonction pour afficher les erreurs
error() {
    echo "‚ùå ERREUR: $1"
    ((ERRORS++))
}

# Fonction pour afficher les avertissements
warning() {
    echo "‚ö†Ô∏è  AVERTISSEMENT: $1"
    ((WARNINGS++))
}

# Fonction pour afficher les succ√®s
success() {
    echo "‚úÖ $1"
}

echo "1. üìã V√©rification de la structure des fichiers"
echo "------------------------------------------------"

# V√©rifier l'existence du fichier principal
if [ -f "$PLUGIN_PATH/$MAIN_FILE" ]; then
    success "Fichier principal trouv√©: $MAIN_FILE"
else
    error "Fichier principal manquant: $MAIN_FILE"
fi

# V√©rifier les dossiers essentiels
for dir in "admin" "includes" "vendor"; do
    if [ -d "$PLUGIN_PATH/$dir" ]; then
        success "Dossier trouv√©: $dir/"
        # V√©rifier que le dossier n'est pas vide
        if [ -z "$(ls -A $PLUGIN_PATH/$dir)" ]; then
            warning "Le dossier $dir/ est vide"
        fi
    else
        error "Dossier manquant: $dir/"
    fi
done

# V√©rifier les fichiers optionnels mais recommand√©s
for file in "README.md" "composer.json"; do
    if [ -f "$PLUGIN_PATH/$file" ]; then
        success "Fichier trouv√©: $file"
    else
        warning "Fichier recommand√© manquant: $file"
    fi
done

echo ""
echo "2. üîß V√©rification de l'en-t√™te du plugin principal"
echo "------------------------------------------------"

if [ -f "$PLUGIN_PATH/$MAIN_FILE" ]; then
    # V√©rifier la pr√©sence des m√©tadonn√©es WordPress obligatoires
    PLUGIN_HEADER=$(head -30 "$PLUGIN_PATH/$MAIN_FILE")
    
    # V√©rifier le format du commentaire DocBlock
    if echo "$PLUGIN_HEADER" | grep -q "^/\*\*" && echo "$PLUGIN_HEADER" | grep -q "\*/"; then
        success "Format de commentaire DocBlock d√©tect√© (/**...*/)"
    else
        error "En-t√™te du plugin doit utiliser le format DocBlock (/** ... */) au lieu de /* ... */"
    fi
    
    # V√©rifier que le plugin commence bien par <?php
    FIRST_LINE=$(head -1 "$PLUGIN_PATH/$MAIN_FILE")
    if [ "$FIRST_LINE" = "<?php" ]; then
        success "Balise PHP d'ouverture correcte"
    else
        error "Le fichier doit commencer par <?php"
    fi
    
    # Plugin Name
    if echo "$PLUGIN_HEADER" | grep -q "Plugin Name:"; then
        PLUGIN_NAME_VALUE=$(echo "$PLUGIN_HEADER" | grep "Plugin Name:" | cut -d':' -f2 | xargs)
        success "Plugin Name trouv√©: $PLUGIN_NAME_VALUE"
    else
        error "En-t√™te 'Plugin Name:' manquant"
    fi
    
    # Version
    if echo "$PLUGIN_HEADER" | grep -q "Version:"; then
        VERSION_VALUE=$(echo "$PLUGIN_HEADER" | grep "Version:" | cut -d':' -f2 | xargs)
        success "Version trouv√©e: $VERSION_VALUE"
    else
        error "En-t√™te 'Version:' manquant"
    fi
    
    # Description
    if echo "$PLUGIN_HEADER" | grep -q "Description:"; then
        success "Description trouv√©e"
    else
        warning "En-t√™te 'Description:' manquant (recommand√©)"
    fi
    
    # Author
    if echo "$PLUGIN_HEADER" | grep -q "Author:"; then
        success "Auteur trouv√©"
    else
        warning "En-t√™te 'Author:' manquant (recommand√©)"
    fi
    
    # Text Domain
    if echo "$PLUGIN_HEADER" | grep -q "Text Domain:"; then
        TEXT_DOMAIN_VALUE=$(echo "$PLUGIN_HEADER" | grep "Text Domain:" | cut -d':' -f2 | xargs)
        success "Text Domain trouv√©: $TEXT_DOMAIN_VALUE"
    else
        warning "En-t√™te 'Text Domain:' manquant"
    fi
fi

echo ""
echo "3. üîç V√©rification de la syntaxe PHP"
echo "------------------------------------------------"

if [ -f "$PLUGIN_PATH/$MAIN_FILE" ]; then
    if php -l "$PLUGIN_PATH/$MAIN_FILE" > /dev/null 2>&1; then
        success "Syntaxe PHP valide pour $MAIN_FILE"
    else
        error "Erreur de syntaxe PHP dans $MAIN_FILE"
        php -l "$PLUGIN_PATH/$MAIN_FILE"
    fi
fi

# V√©rifier tous les fichiers PHP
PHP_FILES=$(find "$PLUGIN_PATH" -name "*.php" -not -path "*/vendor/*" 2>/dev/null)
if [ -n "$PHP_FILES" ]; then
    PHP_SYNTAX_ERRORS=0
    while IFS= read -r php_file; do
        if ! php -l "$php_file" > /dev/null 2>&1; then
            error "Erreur de syntaxe dans: $php_file"
            ((PHP_SYNTAX_ERRORS++))
        fi
    done <<< "$PHP_FILES"
    
    if [ $PHP_SYNTAX_ERRORS -eq 0 ]; then
        success "Tous les fichiers PHP ont une syntaxe valide"
    fi
fi

echo ""
echo "4. üì¶ V√©rification des d√©pendances Composer"
echo "------------------------------------------------"

if [ -f "$PLUGIN_PATH/composer.json" ]; then
    success "composer.json trouv√©"
    
    if [ -f "$PLUGIN_PATH/vendor/autoload.php" ]; then
        success "Autoloader Composer trouv√©"
    else
        error "vendor/autoload.php manquant - ex√©cuter 'composer install'"
    fi
    
    # V√©rifier si les d√©pendances FPDF/FPDI sont pr√©sentes
    if [ -d "$PLUGIN_PATH/vendor/setasign" ]; then
        success "D√©pendances setasign (FPDF/FPDI) trouv√©es"
    else
        error "D√©pendances setasign manquantes"
    fi
else
    warning "composer.json manquant"
fi

echo ""
echo "5. üåç V√©rification de l'internationalisation"
echo "------------------------------------------------"

if [ -d "$PLUGIN_PATH/languages" ]; then
    success "Dossier languages/ trouv√©"
    
    # V√©rifier les fichiers de traduction
    POT_FILES=$(find "$PLUGIN_PATH/languages" -name "*.pot" 2>/dev/null | wc -l)
    PO_FILES=$(find "$PLUGIN_PATH/languages" -name "*.po" 2>/dev/null | wc -l)
    MO_FILES=$(find "$PLUGIN_PATH/languages" -name "*.mo" 2>/dev/null | wc -l)
    
    if [ $POT_FILES -gt 0 ]; then
        success "$POT_FILES fichier(s) POT trouv√©(s)"
    else
        warning "Aucun fichier POT trouv√©"
    fi
    
    if [ $PO_FILES -gt 0 ]; then
        success "$PO_FILES fichier(s) PO trouv√©(s)"
    else
        warning "Aucun fichier PO trouv√©"
    fi
    
    if [ $MO_FILES -gt 0 ]; then
        success "$MO_FILES fichier(s) MO trouv√©(s)"
    else
        warning "Aucun fichier MO trouv√© (les traductions ne seront pas actives)"
    fi
else
    warning "Dossier languages/ manquant"
fi

echo ""
echo "6. üß™ V√©rification de la structure pour WordPress"
echo "------------------------------------------------"

# V√©rifier si le plugin suit la structure WordPress standard
PLUGIN_DIR_NAME=$(basename "$PLUGIN_PATH")
if [ "$PLUGIN_DIR_NAME" = "$PLUGIN_NAME" ]; then
    success "Nom du dossier correct: $PLUGIN_DIR_NAME"
else
    warning "Le nom du dossier ($PLUGIN_DIR_NAME) ne correspond pas au nom du plugin ($PLUGIN_NAME)"
fi

# V√©rifier la pr√©sence de code WordPress
if [ -f "$PLUGIN_PATH/$MAIN_FILE" ]; then
    if grep -q "add_action\|add_filter\|wp_\|WP_" "$PLUGIN_PATH/$MAIN_FILE" > /dev/null 2>&1; then
        success "Code WordPress d√©tect√© dans le fichier principal"
    else
        warning "Aucun code WordPress √©vident d√©tect√©"
    fi
fi

echo ""
echo "=================================================="
echo "üìä R√âSUM√â DE LA VALIDATION"
echo "=================================================="

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo "üéâ EXCELLENT! Le plugin semble parfaitement configur√©."
elif [ $ERRORS -eq 0 ]; then
    echo "‚úÖ BIEN! Le plugin est valide avec $WARNINGS avertissement(s) mineur(s)."
else
    echo "‚ùå PROBL√àME! Le plugin a $ERRORS erreur(s) et $WARNINGS avertissement(s)."
fi

echo ""
echo "Erreurs: $ERRORS"
echo "Avertissements: $WARNINGS"
echo ""

if [ $ERRORS -gt 0 ]; then
    echo "üîß Actions recommand√©es:"
    echo "1. Corriger les erreurs list√©es ci-dessus"
    echo "2. Relancer la validation avec: ./validate-plugin.sh"
    echo "3. Tester le plugin dans un environnement WordPress"
    exit 1
fi

exit 0